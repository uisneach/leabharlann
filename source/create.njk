---
layout: layout.njk
---
<div class="container mt-4">
  <h1>Create Node</h1>
  <form id="createForm">
    <div class="mb-3">
      <label for="nodeLabels" class="form-label">Node Labels (comma-separated)</label>
      <input type="text" class="form-control" id="nodeLabels" placeholder="e.g., Author, Person" required>
    </div>
    <div class="mb-3">
      <label class="form-label">Properties</label>
      <table class="table table-bordered" id="propertiesTable">
        <thead>
          <tr>
            <th scope="col">Name</th>
            <th scope="col">Value</th>
          </tr>
        </thead>
        <tbody id="properties">
          <tr class="property-row">
            <td><input type="text" class="form-control" name="prop-name-0" placeholder="e.g., name, title"></td>
            <td><input type="text" class="form-control" name="prop-value-0" placeholder="e.g., Jane Doe, The Iliad"></td>
          </tr>
        </tbody>
      </table>
      <button type="button" class="btn btn-secondary mb-3" id="addProperty">Add Property</button>
    </div>
    <div id="errorMessage" class="text-danger mb-3" style="display: none;"></div>
    <button type="submit" class="btn btn-primary">Create Node</button>
    <a href="index.html" class="btn btn-link">Cancel</a>
  </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script>
  let propertyCount = 1;

  // Handle adding properties
  document.getElementById('addProperty').addEventListener('click', () => {
    const tbody = document.getElementById('properties');
    const row = document.createElement('tr');
    row.className = 'property-row';
    row.innerHTML = `
      <td><input type="text" class="form-control" name="prop-name-${propertyCount}" placeholder="e.g., name, title"></td>
      <td><input type="text" class="form-control" name="prop-value-${propertyCount}"></td>
    `;
    tbody.appendChild(row);
    propertyCount++;
  });

  // Handle node search for relationships
  function attachSearchListener(searchInput, resultsList, targetIdInput, targetLabelInput) {
    searchInput.addEventListener('input', async () => {
      const query = searchInput.value.trim();
      const label = targetLabelInput.value.trim();
      if (!query || !label) {
        resultsList.style.display = 'none';
        resultsList.innerHTML = '';
        return;
      }

      try {
        const response = await searchWithLabel(query, label);

        if (!response.ok) {
          throw new Error(`Search failed with status: ${response.status}`);
        }

        const results = await response.json();
        resultsList.innerHTML = ''; // Clear previous results

        if (results.length > 0) {
          results.forEach(node => {
            const li = document.createElement('li');
            li.className = 'list-group-item';
            li.textContent = node.properties?.name || node.properties?.title || node.id;
            li.addEventListener('click', () => {
              targetIdInput.value = node.id;
              searchInput.value = li.textContent;
              resultsList.style.display = 'none';
              resultsList.innerHTML = '';
            });
            resultsList.appendChild(li);
          });
          resultsList.style.display = 'block';
        } else {
          resultsList.style.display = 'none';
        }
      } catch (error) {
        console.error('Search error:', error);
        resultsList.style.display = 'none';
      }
    });
  }

  // Attach search listeners to initial relationship row
  document.querySelectorAll('.relationship-row').forEach(row => {
    const searchInput = row.querySelector('.rel-search');
    const resultsList = row.querySelector('.rel-results');
    const targetIdInput = row.querySelector('.rel-target-id');
    const targetLabelInput = row.querySelector(`[name="rel-target-label-0"]`);
    attachSearchListener(searchInput, resultsList, targetIdInput, targetLabelInput);
  });

  // Handle form submission
  document.getElementById('createForm').addEventListener('submit', async e => {
    e.preventDefault();
    const errorMessage = document.getElementById('errorMessage');
    errorMessage.style.display = 'none';

    // Validate and collect labels
    const labelsInput = document.getElementById('nodeLabels').value.trim();
    const labels = labelsInput.split(',').map(label => label.trim()).filter(label => label);
    if (!labels.length) {
      errorMessage.style.display = 'block';
      errorMessage.textContent = 'At least one label is required';
      return;
    }
    if (labels.some(label => !/^[A-Za-z_][A-Za-z0-9_]*$/.test(label))) {
      errorMessage.style.display = 'block';
      errorMessage.textContent = 'Labels must contain only letters, numbers, or underscores';
      return;
    }

    // Collect properties (optional)
    const properties = {};
    let invalidProp = false;
    document.querySelectorAll('.property-row').forEach((row, index) => {
      const name = row.querySelector(`[name="prop-name-${index}"]`).value.trim();
      const value = row.querySelector(`[name="prop-value-${index}"]`).value.trim();
      if (name) {
        if (/[^a-zA-Z0-9_]/.test(name)) {
          invalidProp = true;
          return;
        }
        properties[name] = value || null;
      }
    });
    if (invalidProp) {
      errorMessage.style.display = 'block';
      errorMessage.textContent = 'Property names must contain only letters, numbers, or underscores';
      return;
    }

    try {
      // Create node
      const nodeResponse = await createNode(labels, properties);
      const nodeData = await nodeResponse.json();
      if (!nodeResponse.ok) throw new Error(nodeData.error.message || 'Failed to create node');
      window.location.href = `/leabharlann/info/index.html?id=${encodeURIComponent(nodeData.id)}`;
    } catch (error) {
      errorMessage.style.display = 'block';
      errorMessage.textContent = error.message;
    }
  });

  window.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const label = urlParams.get('label');
    if (label) {
      document.getElementById('nodeLabels').value = label;
    }
  });
</script>
