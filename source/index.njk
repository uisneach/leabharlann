---
layout: layout.njk
---
<div id="welcome-message" class="container-fluid">
  <h2>Fáilte go dtí an Leabharlann Ghealach</h2>
  <p>Explore our digital library of Irish and Celtic texts, or sign up to contribute to the database. Learn how to navigate and use the collection in our <a href="/leabharlann/how-to/index.html">User Guide</a>.</p>
</div>

<div id="content" class="container-fluid" style="position:relative;">
  <!-- Spinner overlay for loading the API -->
  <div id="api-spinner-inside" aria-hidden="true" class="api-spinner-overlay">
    <div class="api-spinner" role="status" aria-live="polite" aria-atomic="true">
      <div class="spinner-border" role="status" style="width:3rem;height:3rem;">
        <span class="visually-hidden">Loading...</span>
      </div>
      <div id="api-spinner-message" class="mt-2">The API is spinning up</div>
    </div>
  </div>

  <div class="mb-3">
    <label for="add-label-select" class="form-label">More Pages by Type:</label>
    <select id="add-label-select" class="form-select w-auto d-inline-block">
      <option value="">Select a label</option>
    </select>
    <button id="add-label-btn" class="btn btn-primary ms-2">Add</button>
  </div>
  <div id="columns" class="row"></div>
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>

<script>
  const defaultLabels = ['Author', 'Text', 'Edition'];

  async function fetchLabels() {
    const res = await fetchWithSpinner(() => getLabels());
    if (res && typeof res.ok === 'boolean') {
      if (!res.ok) throw new Error(`Failed to load labels: ${res.status} ${res.statusText}`);
      const data = await res.json();
      return data.labels;
    } else {
      return res && res.labels ? res.labels : [];
    }
  }

  async function fetchNodesByLabel(label) {
    const res = await fetchWithSpinner(() => getNodesByLabel(label));
    if (res && typeof res.ok === 'boolean') {
      if (!res.ok) throw new Error(`Failed to load ${label} nodes: ${res.status} ${res.statusText}`);
      return res.json();
    } else {
      return res;
    }
  }

  function populateList(containerId, items, label, labelKeys) {
    const ul = document.getElementById(containerId);
    if (!ul) return;
    ul.innerHTML = '';
    items.forEach(item => {
      const li = document.createElement('li');
      const a = document.createElement('a');
      const keys = Array.isArray(labelKeys) ? labelKeys : [labelKeys];
      const properties = item.properties || {};
      const id = item.id || '';
      const title = keys.reduce((result, key) => result || properties[key], '') || id;
      a.textContent = title || 'Unknown';
      a.href = `/leabharlann/info/index.html?id=${encodeURIComponent(id)}`;
      li.appendChild(a);
      ul.appendChild(li);
    });
  }

  function createColumn(label) {
    const col = document.createElement('div');
    col.className = 'col-md-4';
    col.id = `col-${label}`;
    col.innerHTML = `
      <div class="d-flex justify-content-between align-items-center">
        <h2 class="section-title">${label}s <a href="/leabharlann/label/index.html?label=${label}" class="ms-2 text-decoration-none" style="font-size:16px;">See All→</a></h2>
        <div>
          <a href="/leabharlann/create/index.html?label=${encodeURIComponent(label)}" class="btn btn-sm btn-primary create-btn" style="display: none;">+</a>
          <button class="btn btn-sm btn-danger remove-btn" data-label="${label}">Remove</button>
        </div>
      </div>
      <ul id="${label}-list" class="node-list"></ul>
    `;
    return col;
  }

  async function renderColumn(label) {
    try {
      const nodes = await fetchNodesByLabel(label);
      const col = createColumn(label);
      document.getElementById('columns').appendChild(col);
      populateList(`${label}-list`, nodes, label, ['display_name', 'name', 'title']);
      updateAuthUI();
      attachRemoveButtonListeners();
    } catch (err) {
      console.error(`Error rendering column ${label}:`, err);
      const col = createColumn(label);
      document.getElementById('columns').appendChild(col);
      const ul = document.getElementById(`${label}-list`);
      if (ul) {
        ul.innerHTML = `<li class="text-danger">Error loading: ${err.message}</li>`;
      }
    }
  }

  function updateAuthUI() {
    const isAuthenticated = !!localStorage.getItem('token');
    document.querySelectorAll('.create-btn').forEach(btn => {
      btn.style.display = isAuthenticated ? 'block' : 'none';
    });
    document.querySelectorAll('.remove-btn').forEach(btn => {
      btn.style.display = defaultLabels.includes(btn.dataset.label) && document.querySelectorAll('.col-md-4').length <= 3
        ? 'none' : 'inline-block';
    });
  }

  function attachRemoveButtonListeners() {
    document.querySelectorAll('.remove-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const label = btn.dataset.label;
        const col = document.getElementById(`col-${label}`);
        if (col) col.remove();
        updateAddLabelDropdown();
        updateAuthUI();
      });
    });
  }

  async function updateAddLabelDropdown() {
    const select = document.getElementById('add-label-select');
    select.innerHTML = '<option value="">Select a label</option>';
    try {
      const labels = await fetchLabels();
      const activeLabels = Array.from(document.querySelectorAll('.col-md-4')).map(col => col.id.replace('col-', ''));
      labels.forEach(label => {
        if (!activeLabels.includes(label)) {
          const option = document.createElement('option');
          option.value = label;
          option.textContent = label;
          select.appendChild(option);
        }
      });
    } catch (err) {
      console.error('Error updating dropdown:', err);
      const option = document.createElement('option');
      option.value = '';
      option.textContent = 'Failed to load labels';
      option.disabled = true;
      select.appendChild(option);
    }
  }

  async function loadHome() {
    try {
      for (const label of defaultLabels) {
        await renderColumn(label);
      }
      await updateAddLabelDropdown();
      document.getElementById('add-label-btn').addEventListener('click', async () => {
        const select = document.getElementById('add-label-select');
        const label = select.value;
        if (label) {
          await renderColumn(label);
          select.value = '';
          updateAddLabelDropdown();
        }
      });
      updateAuthUI();
    } catch (err) {
      console.error('Load error:', err);
      document.getElementById('content').innerHTML =
        `<p class="text-danger">Error loading data: ${err.message}</p>`;
    }
  }

  window.addEventListener('DOMContentLoaded', () => {
    loadHome();
  });

  document.addEventListener('authChange', updateAuthUI);
</script>
